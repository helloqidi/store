#启动进程,通常设置成和cpu的数量相等
worker_processes  1;

#全局错误日志及PID文件
error_log  /var/log/nginx/error.log;
pid  /var/run/nginx.pid;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll; 
 
    #单个后台worker process进程的最大并发链接数    
    worker_connections  1024;
 
    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients=worker_processes*worker_connections/4
    # 为什么上面反向代理要除以4，应该说是一个经验值
}

http {
    #设定mime类型,类型由mime.type文件定义
    include    mime.types;
    default_type  application/octet-stream;
    #设定日志格式
    #access_log    /var/log/nginx/access.log;
 
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile     on;

    #打开linux（仅linux下）下TCP_CORK，sendfile打开时才有效，用来发送系统HTTP response headers设置该选项的目的是告诉TCP协议不要仅仅为了清空发送缓存而发送报文段。通常应该设置TCPNOPUSH插口选项。这样，当请求长度超过报文段最大长度时，协议就会尽可能发出满长度的报文段。这样可以减少报文段的数量，减少的程度取决于每次发送的数据量
    tcp_nopush     on;
 
    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  30;
    tcp_nodelay     on;
 
    #开启gzip压缩
    gzip  on;
 
    #设定请求缓冲
    client_header_buffer_size    2k;
    large_client_header_buffers  4 64k;
 
 
    #设定虚拟主机配置
    upstream store_server {
        server unix:/opt/project/store/log/rainbows.sock fail_timeout=0;
    }
 
    server {
        listen   80;
        charset  utf-8;
        server_name  115.28.34.45;
     
        keepalive_timeout 5;
     
        location / {
            proxy_set_header Host               $host;
            proxy_set_header X-Forwarded-Host   $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Real-IP          $remote_addr;
            proxy_set_header X-Forward-For      $proxy_add_x_forwarded_for;
            proxy_buffering  on;
            proxy_redirect   off;
     
            if (!-f $request_filename) {
                proxy_pass http://store_server;
                break;
            } 
        }
    }


}
